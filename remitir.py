#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para remitir facturas v√≠a API
Replica el funcionamiento del curl POST proporcionado

Uso: python remitir.py <token> <json> <ruta_archivo>
Ejemplo: python remitir.py "fsdfsdfsdf" '{"invoice_type":"F1",...}' "C:\VELNEO\TRASPASOS\bugaderia\5.txt"
"""

import sys
import requests
import json
import os
from pathlib import Path


def mostrar_ayuda():
    """Muestra el mensaje de ayuda del programa"""
    print("\nüì§ Remisi√≥n de Facturas - API Verifactu")
    print("=" * 50)
    print("\nüéØ DESCRIPCI√ìN:")
    print("   Este programa env√≠a facturas a la API de Verifactu mediante POST")
    print("   y guarda la respuesta JSON en un archivo local.")
    print("\nüìã USO:")
    print("   remitir.exe <token> <json_data> <ruta_archivo>")
    print("\nüìù PAR√ÅMETROS:")
    print("   token       : Token de autorizaci√≥n de la API")
    print("   json_data   : Datos JSON de la factura (string)")
    print("   ruta_archivo: Ruta completa donde guardar la respuesta")
    print("\nüí° EJEMPLO:")
    print('   remitir.exe "fsdfsdfsdf" \\')
    print('               \'{"invoice_type":"F1","customer_name":"A.C.E.S., S.L.",...}\' \\')
    print('               "C:\\VELNEO\\TRASPASOS\\bugaderia\\5.txt"')
    print("\nüåê EQUIVALE AL COMANDO CURL:")
    print("   curl --location 'https://verifactu.corsoft.com.es/api/invoices/' \\")
    print("        --header 'Content-Type: application/json' \\")
    print("        --header 'Authorization: Token <token>' \\")
    print("        --data '<json_data>' > <ruta_archivo>")
    print("\nüîí NOTA DE SEGURIDAD:")
    print("   - Nunca hardcodees tokens en el c√≥digo")
    print("   - Mant√©n los tokens seguros y r√≥talos regularmente")
    print("\nüìä FORMATO JSON ESPERADO:")
    print("   El JSON debe contener los campos requeridos por la API:")
    print("   - invoice_type, customer_name, customer_country, etc.")
    print("\n" + "=" * 50)
    print("\n‚è∏Ô∏è  Presiona ENTER para continuar...")
    input()


def arreglar_json_powershell(json_string, debug=False):
    """
    Arregla JSON da√±ado por PowerShell que elimina comillas dobles
    
    Args:
        json_string (str): JSON potencialmente da√±ado por PowerShell
        debug (bool): Si mostrar informaci√≥n de debug
    
    Returns:
        str: JSON corregido con comillas apropiadas
    """
    import re
    
    # Si ya es JSON v√°lido, devolverlo tal como est√°
    try:
        json.loads(json_string)
        return json_string
    except json.JSONDecodeError:
        pass
    
    if debug:
        print(f"üîß Arreglando JSON da√±ado por PowerShell...")
        print(f"üìù JSON original: {json_string}")
    
    # Paso 0: Remover comillas simples externas si est√°n presentes
    # PowerShell puede pasar las comillas simples como parte del string
    if json_string.startswith("'") and json_string.endswith("'"):
        json_string = json_string[1:-1]  # Remover primera y √∫ltima comilla simple
        if debug:
            print(f"üìù Despu√©s de remover comillas simples externas: {json_string[:100]}...")
    
    # Paso 1: Agregar comillas alrededor de nombres de propiedades
    # Patr√≥n: {word: o ,word:
    json_string = re.sub(r'([{,]\s*)([a-zA-Z_][a-zA-Z0-9_]*)(\s*:)', r'\1"\2"\3', json_string)
    if debug:
        print(f"üìù Despu√©s de agregar comillas a propiedades: {json_string[:100]}...")
    
    # Paso 2: Arreglar valores vac√≠os (:"," o :})
    # Patr√≥n: : seguido de coma o llave de cierre
    json_string = re.sub(r'(:\s*)(,|[}\]])', r'\1""\2', json_string)
    if debug:
        print(f"üìù Despu√©s de arreglar valores vac√≠os: {json_string[:100]}...")
    
    # Paso 3: Agregar comillas alrededor de valores de string
    def quote_string_values(match):
        colon_space = match.group(1)  # : y espacios opcionales
        value = match.group(2)        # el valor
        comma_or_end = match.group(3) # , } ] o final
        
        value_clean = value.strip()
        
        # Si est√° vac√≠o, ya se manej√≥ en el paso 2
        if not value_clean:
            return match.group(0)
        
        # Si es n√∫mero (entero o decimal), no cambiar
        if re.match(r'^-?\d+(\.\d+)?$', value_clean):
            return match.group(0)
        
        # Si es booleano o null, no cambiar
        if value_clean in ['true', 'false', 'null']:
            return match.group(0)
        
        # Si ya tiene comillas, no cambiar
        if value_clean.startswith('"') and value_clean.endswith('"'):
            return match.group(0)
        
        # Agregar comillas alrededor del valor
        return f'{colon_space}"{value_clean}"{comma_or_end}'
    
    # Patr√≥n para capturar valores: : seguido de cualquier contenido hasta , } ]
    json_string = re.sub(r'(:\s*)([^,}\]]*?)(\s*[,}\]])', quote_string_values, json_string)
    if debug:
        print(f"üìù JSON final arreglado: {json_string[:100]}...")
    
    return json_string


def validar_json(json_string, debug=False):
    """
    Valida que el string proporcionado sea un JSON v√°lido
    Intenta arreglar autom√°ticamente JSON da√±ado por PowerShell
    
    Args:
        json_string (str): String que debe ser JSON v√°lido
        debug (bool): Si mostrar informaci√≥n de debug
    
    Returns:
        dict: JSON parseado si es v√°lido
        None: Si no es v√°lido
    """
    try:
        # Intentar parsear tal como est√°
        return json.loads(json_string)
    except json.JSONDecodeError as e:
        if debug:
            print(f"‚ö†Ô∏è  JSON inv√°lido detectado. Detalle: {e}")
            print(f"üîß Intentando arreglar JSON da√±ado por PowerShell...")
        
        try:
            # Intentar arreglar el JSON
            json_arreglado = arreglar_json_powershell(json_string, debug)
            resultado = json.loads(json_arreglado)
            if debug:
                print(f"üéâ ¬°JSON arreglado exitosamente!")
            return resultado
            
        except json.JSONDecodeError as e2:
            # Solo mostrar error si debug est√° activado
            if debug:
                print(f"‚ùå Error: No se pudo arreglar el JSON autom√°ticamente")
                print(f"   Error original: {e}")
                print(f"   Error despu√©s del arreglo: {e2}")
            return None


def main():
    # Verificar que se proporcionen exactamente 3 par√°metros
    if len(sys.argv) != 4:
        if len(sys.argv) == 1:
            # Si no se proporcionan par√°metros, mostrar ayuda completa
            mostrar_ayuda()
        else:
            # Si se proporcionan par√°metros incorrectos, mostrar error y ayuda breve
            print(f"\n‚ùå Error: Se requieren exactamente 3 par√°metros (se proporcionaron {len(sys.argv)-1})")
            print("\nüìã USO CORRECTO:")
            print("   remitir.exe <token> <json_data> <ruta_archivo>")
            print("\nüí° EJEMPLO:")
            print('   remitir.exe "mi_token_api" \\')
            print('               \'{"invoice_type":"F1","customer_name":"Cliente"}\' \\')
            print('               "C:\\ruta\\archivo.txt"')
            print("\nüí¨ Para m√°s informaci√≥n, ejecuta el programa sin par√°metros.")
            print("\n‚è∏Ô∏è  Presiona ENTER para continuar...")
            input()
        sys.exit(1)
    
    # Obtener par√°metros de l√≠nea de comandos
    token = sys.argv[1]
    json_data_string = sys.argv[2]
    ruta_archivo = sys.argv[3]
    
    # Validar que el JSON sea v√°lido
    json_data = validar_json(json_data_string)
    if json_data is None:
        # Mostrar detalles del error solo cuando falla
        print(f"\nüîç DEBUG - JSON recibido (primeros 100 chars): {json_data_string[:100]}...")
        print(f"üîç DEBUG - Longitud: {len(json_data_string)} caracteres")
        
        # Intentar de nuevo con debug activado para mostrar detalles
        print("\nüîç Intentando de nuevo con informaci√≥n detallada...")
        json_data = validar_json(json_data_string, debug=True)
        
        if json_data is None:
            print("\nüí¨ Tip: Aseg√∫rate de que el JSON est√© entre comillas simples")
            print("üí¨      y que todos los campos tengan el formato correcto")
            print("\n‚è∏Ô∏è  Presiona ENTER para continuar...")
            input()
            sys.exit(1)
    
    # URL de la API
    url = "https://verifactu.corsoft.com.es/api/invoices/"
    
    # Preparar headers
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Token {token}'
    }
    
    try:
        print(f"üöÄ Enviando factura a la API...")
        print(f"üìç URL: {url}")
        print(f"üîë Token: {token[:10]}...")  # Mostrar solo los primeros 10 caracteres por seguridad
        print(f"üìÑ Guardando en: {ruta_archivo}")
        
        # Realizar la petici√≥n HTTP POST
        response = requests.post(url, headers=headers, json=json_data)
        
        # Verificar si la petici√≥n fue exitosa
        if response.status_code in [200, 201]:
            # Crear directorio si no existe
            output_path = Path(ruta_archivo)
            output_path.parent.mkdir(parents=True, exist_ok=True)
            
            # Guardar el contenido en el archivo
            with open(ruta_archivo, 'w', encoding='utf-8') as f:
                f.write(response.text)
            
            # Ejecuti√≥n exitosa: no mostrar nada y salir silenciosamente
            # Solo en caso de que quieras ver confirmaci√≥n, descomenta las siguientes l√≠neas:
            # print(f"‚úì Factura enviada exitosamente!")
            # print(f"‚úì C√≥digo de respuesta: {response.status_code}")
            # print(f"‚úì Respuesta guardada en: {ruta_archivo}")
            
        else:
            print(f"‚úó Error en la petici√≥n. C√≥digo de estado: {response.status_code}")
            print(f"‚úó Mensaje: {response.text}")
            
            # Intentar guardar la respuesta de error tambi√©n
            try:
                output_path = Path(ruta_archivo)
                output_path.parent.mkdir(parents=True, exist_ok=True)
                
                with open(ruta_archivo, 'w', encoding='utf-8') as f:
                    f.write(response.text)
                print(f"‚úì Respuesta de error guardada en: {ruta_archivo}")
            except Exception as save_error:
                print(f"‚úó Error al guardar respuesta de error: {save_error}")
            
            print("\n‚è∏Ô∏è  Presiona ENTER para continuar...")
            input()
            sys.exit(1)
            
    except requests.exceptions.RequestException as e:
        print(f"‚úó Error de conexi√≥n: {e}")
        print("\n‚è∏Ô∏è  Presiona ENTER para continuar...")
        input()
        sys.exit(1)
    except Exception as e:
        print(f"‚úó Error inesperado: {e}")
        print("\n‚è∏Ô∏è  Presiona ENTER para continuar...")
        input()
        sys.exit(1)


if __name__ == "__main__":
    main()
